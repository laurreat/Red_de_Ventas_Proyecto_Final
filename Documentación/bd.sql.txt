-- =====================================================
-- BASE DE DATOS COMPLETA: AREPA LA LLANERITA (SIMPLIFICADA)
-- Proyecto Final SENA - Sistema de Ventas con Referidos
-- =====================================================

-- Crear base de datos
DROP DATABASE IF EXISTS arepa_llanerita;
CREATE DATABASE arepa_llanerita CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE arepa_llanerita;

-- =====================================================
-- TABLA: users (extendida con sistema de referidos)
-- =====================================================
CREATE TABLE users (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    apellidos VARCHAR(255) NOT NULL,
    cedula VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    email_verified_at TIMESTAMP NULL,
    password VARCHAR(255) NOT NULL,
    telefono VARCHAR(255) NULL,
    direccion TEXT NULL,
    ciudad VARCHAR(255) NULL,
    departamento VARCHAR(255) NULL,
    fecha_nacimiento DATE NULL,
    
    -- Sistema de roles
    rol ENUM('cliente', 'vendedor', 'lider', 'administrador') DEFAULT 'cliente',
    activo BOOLEAN DEFAULT TRUE,
    ultimo_acceso TIMESTAMP NULL,
    
    -- Sistema de referidos
    referido_por BIGINT UNSIGNED NULL,
    codigo_referido VARCHAR(255) UNIQUE NULL,
    total_referidos INT DEFAULT 0,
    comisiones_ganadas DECIMAL(12,2) DEFAULT 0,
    comisiones_disponibles DECIMAL(12,2) DEFAULT 0,
    
    -- Información comercial
    meta_mensual DECIMAL(12,2) NULL,
    ventas_mes_actual DECIMAL(12,2) DEFAULT 0,
    nivel_vendedor INT DEFAULT 1,
    zonas_asignadas JSON NULL,
    
    remember_token VARCHAR(100) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Índices
    INDEX idx_codigo_referido (codigo_referido),
    INDEX idx_rol_activo (rol, activo),
    INDEX idx_referido_por (referido_por),
    
    -- Foreign keys
    FOREIGN KEY (referido_por) REFERENCES users(id) ON DELETE SET NULL
);

-- =====================================================
-- TABLA: categorias
-- =====================================================
CREATE TABLE categorias (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    descripcion TEXT NULL,
    imagen VARCHAR(255) NULL,
    activo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- =====================================================
-- TABLA: productos (completa y escalable)
-- =====================================================
CREATE TABLE productos (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    codigo VARCHAR(255) UNIQUE NOT NULL,
    nombre VARCHAR(255) NOT NULL,
    descripcion TEXT NULL,
    categoria_id BIGINT UNSIGNED NOT NULL,
    
    -- Precios
    precio DECIMAL(10,2) NOT NULL,
    precio_costo DECIMAL(10,2) NULL,
    precio_mayorista DECIMAL(10,2) NULL,
    
    -- Inventario
    stock INT DEFAULT 0,
    stock_minimo INT DEFAULT 5,
    stock_maximo INT NULL,
    unidad_medida VARCHAR(255) DEFAULT 'unidad',
    
    -- Características del producto
    ingredientes JSON NULL,
    alergenos JSON NULL,
    informacion_nutricional TEXT NULL,
    tiempo_preparacion INT NULL,
    peso DECIMAL(8,2) NULL,
    calorias INT NULL,
    
    -- Multimedia
    imagenes JSON NULL,
    imagen_principal VARCHAR(255) NULL,
    
    -- Estados
    disponible BOOLEAN DEFAULT TRUE,
    destacado BOOLEAN DEFAULT FALSE,
    requiere_preparacion BOOLEAN DEFAULT TRUE,
    permite_personalizacion BOOLEAN DEFAULT FALSE,
    
    -- SEO y marketing
    slug VARCHAR(255) UNIQUE NULL,
    tags JSON NULL,
    orden_mostrar INT DEFAULT 0,
    
    -- Métricas
    veces_vendido INT DEFAULT 0,
    rating_promedio DECIMAL(3,2) DEFAULT 0,
    total_reviews INT DEFAULT 0,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Índices
    INDEX idx_disponible_destacado (disponible, destacado),
    INDEX idx_categoria_disponible (categoria_id, disponible),
    INDEX idx_stock (stock),
    INDEX idx_slug (slug),
    INDEX idx_veces_vendido (veces_vendido),
    
    -- Foreign keys
    FOREIGN KEY (categoria_id) REFERENCES categorias(id) ON DELETE CASCADE
);

-- =====================================================
-- TABLA: zonas_entrega
-- =====================================================
CREATE TABLE zonas_entrega (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    descripcion TEXT NULL,
    costo_envio DECIMAL(8,2) DEFAULT 0,
    tiempo_entrega_min INT DEFAULT 30,
    tiempo_entrega_max INT DEFAULT 60,
    pedido_minimo DECIMAL(10,2) DEFAULT 0,
    barrios JSON NULL,
    coordenadas JSON NULL,
    referencias TEXT NULL,
    horarios JSON NULL,
    activo BOOLEAN DEFAULT TRUE,
    vendedores_asignados JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_activo (activo)
);

-- =====================================================
-- TABLA: pedidos
-- =====================================================
CREATE TABLE pedidos (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    numero_pedido VARCHAR(255) UNIQUE NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    estado ENUM('pendiente', 'confirmado', 'en_preparacion', 'listo', 'en_camino', 'entregado', 'cancelado') DEFAULT 'pendiente',
    
    -- Montos
    subtotal DECIMAL(10,2) NOT NULL,
    impuestos DECIMAL(10,2) DEFAULT 0,
    costo_envio DECIMAL(10,2) DEFAULT 0,
    total DECIMAL(10,2) NOT NULL,
    
    -- Entrega
    tipo_entrega VARCHAR(255) DEFAULT 'domicilio',
    direccion_entrega TEXT NULL,
    telefono_entrega VARCHAR(255) NULL,
    zona_entrega_id BIGINT UNSIGNED NULL,
    observaciones TEXT NULL,
    fecha_estimada_entrega TIMESTAMP NULL,
    fecha_entrega_real TIMESTAMP NULL,
    
    -- Vendedor asignado
    vendedor_id BIGINT UNSIGNED NULL,
    fecha_asignacion TIMESTAMP NULL,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Índices
    INDEX idx_estado (estado),
    INDEX idx_numero_pedido (numero_pedido),
    INDEX idx_user_id (user_id),
    INDEX idx_vendedor_id (vendedor_id),
    
    -- Foreign keys
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (vendedor_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (zona_entrega_id) REFERENCES zonas_entrega(id) ON DELETE SET NULL
);

-- =====================================================
-- TABLA: detalle_pedidos
-- =====================================================
CREATE TABLE detalle_pedidos (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    pedido_id BIGINT UNSIGNED NOT NULL,
    producto_id BIGINT UNSIGNED NOT NULL,
    cantidad INT NOT NULL,
    precio_unitario DECIMAL(10,2) NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    observaciones_producto TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Foreign keys
    FOREIGN KEY (pedido_id) REFERENCES pedidos(id) ON DELETE CASCADE,
    FOREIGN KEY (producto_id) REFERENCES productos(id) ON DELETE CASCADE
);

-- =====================================================
-- TABLA: referidos
-- =====================================================
CREATE TABLE referidos (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    referidor_id BIGINT UNSIGNED NOT NULL,
    referido_id BIGINT UNSIGNED NOT NULL,
    fecha_referido TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado ENUM('pendiente', 'activo', 'completado') DEFAULT 'pendiente',
    fecha_activacion TIMESTAMP NULL,
    fecha_completado TIMESTAMP NULL,
    
    -- Métricas (desnormalización)
    total_pedidos INT DEFAULT 0,
    total_compras DECIMAL(12,2) DEFAULT 0,
    comision_generada DECIMAL(10,2) DEFAULT 0,
    
    -- Contexto
    canal_referido VARCHAR(255) NULL,
    metadata JSON NULL,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Índices
    UNIQUE KEY unique_referido (referidor_id, referido_id),
    INDEX idx_estado (estado),
    INDEX idx_fecha_referido (fecha_referido),
    
    -- Foreign keys
    FOREIGN KEY (referidor_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (referido_id) REFERENCES users(id) ON DELETE CASCADE
);

-- =====================================================
-- TABLA: comisiones
-- =====================================================
CREATE TABLE comisiones (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NOT NULL,
    pedido_id BIGINT UNSIGNED NULL,
    referido_id BIGINT UNSIGNED NULL,
    tipo ENUM('venta_directa', 'referido_nuevo', 'referido_compra', 'liderazgo', 'bono_meta', 'ajuste') NOT NULL,
    
    -- Cálculos
    monto_base DECIMAL(12,2) NOT NULL,
    porcentaje DECIMAL(5,2) NOT NULL,
    monto_comision DECIMAL(10,2) NOT NULL,
    
    -- Estado
    estado ENUM('pendiente', 'aprobada', 'pagada', 'cancelada') DEFAULT 'pendiente',
    fecha_calculo TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_aprobacion TIMESTAMP NULL,
    fecha_pago TIMESTAMP NULL,
    
    -- Información adicional
    descripcion TEXT NULL,
    detalles JSON NULL,
    aprobado_por BIGINT UNSIGNED NULL,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Índices
    INDEX idx_user_estado (user_id, estado),
    INDEX idx_tipo_fecha (tipo, fecha_calculo),
    INDEX idx_pedido_id (pedido_id),
    
    -- Foreign keys
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (pedido_id) REFERENCES pedidos(id) ON DELETE CASCADE,
    FOREIGN KEY (referido_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (aprobado_por) REFERENCES users(id) ON DELETE SET NULL
);

-- =====================================================
-- TABLA: movimientos_inventario
-- =====================================================
CREATE TABLE movimientos_inventario (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    producto_id BIGINT UNSIGNED NOT NULL,
    user_id BIGINT UNSIGNED NOT NULL,
    pedido_id BIGINT UNSIGNED NULL,
    tipo ENUM('entrada', 'salida', 'ajuste', 'transferencia') NOT NULL,
    motivo ENUM('venta', 'compra', 'produccion', 'merma', 'devolucion', 'regalo', 'ajuste_inventario', 'transferencia', 'perdida', 'vencimiento') NOT NULL,
    
    -- Cantidades
    cantidad_anterior INT NOT NULL,
    cantidad_movimiento INT NOT NULL,
    cantidad_actual INT NOT NULL,
    
    -- Costos
    costo_unitario DECIMAL(10,2) NULL,
    costo_total DECIMAL(12,2) NULL,
    
    -- Información adicional
    observaciones TEXT NULL,
    lote VARCHAR(255) NULL,
    fecha_vencimiento DATE NULL,
    metadata JSON NULL,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Índices
    INDEX idx_producto_tipo (producto_id, tipo),
    INDEX idx_created_at (created_at),
    INDEX idx_motivo (motivo),
    
    -- Foreign keys
    FOREIGN KEY (producto_id) REFERENCES productos(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (pedido_id) REFERENCES pedidos(id) ON DELETE CASCADE
);

-- =====================================================
-- TABLA: configuraciones
-- =====================================================
CREATE TABLE configuraciones (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    clave VARCHAR(255) UNIQUE NOT NULL,
    valor TEXT NOT NULL,
    tipo VARCHAR(255) DEFAULT 'string',
    descripcion TEXT NULL,
    categoria VARCHAR(255) DEFAULT 'general',
    editable BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_categoria_editable (categoria, editable)
);

-- =====================================================
-- TABLA: notificaciones
-- =====================================================
CREATE TABLE notificaciones (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NOT NULL,
    titulo VARCHAR(255) NOT NULL,
    mensaje TEXT NOT NULL,
    tipo ENUM('info', 'success', 'warning', 'error') DEFAULT 'info',
    leida BOOLEAN DEFAULT FALSE,
    url VARCHAR(255) NULL,
    metadata JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_user_leida (user_id, leida),
    INDEX idx_created_at (created_at),
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- =====================================================
-- TABLA: cupones
-- =====================================================
CREATE TABLE cupones (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    codigo VARCHAR(255) UNIQUE NOT NULL,
    nombre VARCHAR(255) NOT NULL,
    descripcion TEXT NULL,
    tipo ENUM('porcentaje', 'monto_fijo') NOT NULL,
    valor DECIMAL(10,2) NOT NULL,
    monto_minimo DECIMAL(10,2) DEFAULT 0,
    usos_maximos INT NULL,
    usos_realizados INT DEFAULT 0,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    categorias_aplicables JSON NULL,
    productos_aplicables JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    INDEX idx_codigo (codigo),
    INDEX idx_activo_fechas (activo, fecha_inicio, fecha_fin)
);

-- =====================================================
-- TABLA: auditoria
-- =====================================================
CREATE TABLE auditoria (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT UNSIGNED NULL,
    tabla VARCHAR(255) NOT NULL,
    registro_id BIGINT UNSIGNED NOT NULL,
    accion ENUM('crear', 'actualizar', 'eliminar') NOT NULL,
    datos_anteriores JSON NULL,
    datos_nuevos JSON NULL,
    ip VARCHAR(45) NULL,
    user_agent TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_tabla_registro (tabla, registro_id),
    INDEX idx_user_id (user_id),
    INDEX idx_created_at (created_at),
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
);

-- =====================================================
-- INSERTAR DATOS INICIALES
-- =====================================================

-- Configuraciones del sistema
INSERT INTO configuraciones (clave, valor, tipo, descripcion, categoria) VALUES
('nombre_empresa', 'Arepa la Llanerita', 'string', 'Nombre de la empresa', 'empresa'),
('nit_empresa', '900123456-1', 'string', 'NIT de la empresa', 'empresa'),
('direccion_empresa', 'Calle 123 #45-67, Bogotá', 'string', 'Dirección principal', 'empresa'),
('telefono_empresa', '3001234567', 'string', 'Teléfono principal', 'empresa'),
('iva_porcentaje', '19', 'number', 'Porcentaje de IVA', 'ventas'),
('pedido_minimo', '15000', 'number', 'Valor mínimo de pedido', 'ventas'),
('costo_envio_base', '5000', 'number', 'Costo base de envío', 'ventas'),
('tiempo_preparacion_base', '30', 'number', 'Tiempo base de preparación (minutos)', 'ventas'),
('comision_referido_registro', '5000', 'number', 'Comisión por nuevo referido registrado', 'referidos'),
('comision_referido_primera_compra', '10', 'number', 'Porcentaje comisión primera compra referido', 'referidos'),
('comision_venta_directa', '15', 'number', 'Porcentaje comisión venta directa', 'comisiones'),
('comision_lider_equipo', '5', 'number', 'Porcentaje comisión por ventas del equipo', 'comisiones'),
('meta_vendedor_bronce', '500000', 'number', 'Meta mensual vendedor nivel 1', 'metas'),
('meta_vendedor_plata', '1000000', 'number', 'Meta mensual vendedor nivel 2', 'metas'),
('meta_vendedor_oro', '2000000', 'number', 'Meta mensual vendedor nivel 3', 'metas'),
('meta_lider', '5000000', 'number', 'Meta mensual líder', 'metas'),
('moneda', 'COP', 'string', 'Moneda del sistema', 'sistema'),
('formato_pedido', 'ARE-{YYYY}-{NNNN}', 'string', 'Formato número de pedido', 'sistema'),
('stock_minimo_alerta', '5', 'number', 'Stock mínimo para alerta', 'inventario');

-- Usuarios iniciales
INSERT INTO users (name, apellidos, cedula, email, telefono, direccion, ciudad, departamento, rol, password, email_verified_at, codigo_referido) VALUES
('Admin', 'Principal', '12345678', 'admin@arepallanerita.com', '3001234567', 'Calle 123 #45-67', 'Bogotá', 'Cundinamarca', 'administrador', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', NOW(), 'ADMIN001'),
('Juan Carlos', 'Pérez López', '87654321', 'lider@arepallanerita.com', '3009876543', 'Carrera 456 #78-90', 'Bogotá', 'Cundinamarca', 'lider', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', NOW(), 'LIDER001'),
('María Elena', 'González Ruiz', '11223344', 'vendedor@arepallanerita.com', '3001122334', 'Avenida 789 #12-34', 'Bogotá', 'Cundinamarca', 'vendedor', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', NOW(), 'VEND001'),
('Carlos Alberto', 'Rodríguez Mora', '99887766', 'cliente@test.com', '3009988776', 'Calle Cliente #56-78', 'Bogotá', 'Cundinamarca', 'cliente', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', NOW(), 'CLIENTE001');

-- Categorías de productos
INSERT INTO categorias (nombre, descripcion, activo) VALUES
('Arepas Tradicionales', 'Arepas tradicionales colombianas hechas con harina de maíz', TRUE),
('Arepas Rellenas', 'Arepas con deliciosos rellenos tradicionales', TRUE),
('Arepas Especiales', 'Arepas gourmet con ingredientes especiales', TRUE),
('Bebidas', 'Bebidas tradicionales y refrescantes', TRUE),
('Postres', 'Postres tradicionales llaneros', TRUE);

-- Productos principales
INSERT INTO productos (codigo, nombre, descripcion, categoria_id, precio, precio_costo, precio_mayorista, stock, stock_minimo, ingredientes, tiempo_preparacion, peso, calorias, disponible, destacado, requiere_preparacion, slug, tags) VALUES
('ARE-001', 'Arepa Sencilla', 'Arepa tradicional de maíz, perfecta para acompañar cualquier comida', 1, 3500.00, 1200.00, 2800.00, 50, 10, '["harina de maíz", "agua", "sal"]', 15, 120.00, 180, TRUE, TRUE, TRUE, 'arepa-sencilla', '["tradicional", "sin-gluten", "vegetariana"]'),
('ARE-002', 'Arepa de Queso', 'Arepa tradicional con queso derretido en su interior', 1, 5500.00, 2200.00, 4400.00, 40, 8, '["harina de maíz", "agua", "sal", "queso"]', 18, 150.00, 250, TRUE, TRUE, TRUE, 'arepa-de-queso', '["tradicional", "queso", "vegetariana"]'),
('ARE-003', 'Arepa Rellena de Pollo', 'Arepa rellena con pollo desmechado y hogao', 2, 12000.00, 6000.00, 9600.00, 25, 5, '["harina de maíz", "pollo", "cebolla", "tomate", "ajo"]', 25, 280.00, 420, TRUE, TRUE, TRUE, 'arepa-rellena-pollo', '["rellena", "pollo", "proteína"]'),
('ARE-004', 'Arepa Rellena de Carne', 'Arepa rellena con carne desmechada y aguacate', 2, 13500.00, 7000.00, 10800.00, 20, 5, '["harina de maíz", "carne", "aguacate", "cebolla", "tomate"]', 25, 300.00, 480, TRUE, TRUE, TRUE, 'arepa-rellena-carne', '["rellena", "carne", "proteína"]'),
('ARE-005', 'Arepa de Huevo', 'Arepa especial con huevo frito en su interior', 3, 8500.00, 3500.00, 6800.00, 30, 8, '["harina de maíz", "huevo", "aceite", "sal"]', 20, 200.00, 320, TRUE, FALSE, TRUE, 'arepa-de-huevo', '["especial", "huevo", "proteína"]'),
('BEB-001', 'Chicha de Maíz', 'Bebida tradicional llanera a base de maíz', 4, 4500.00, 1800.00, 3600.00, 35, 10, '["maíz", "leche", "azúcar", "canela"]', 5, 250.00, 150, TRUE, TRUE, FALSE, 'chicha-de-maiz', '["bebida", "tradicional", "maíz"]'),
('BEB-002', 'Jugo de Lulo', 'Refrescante jugo natural de lulo', 4, 5000.00, 2000.00, 4000.00, 40, 12, '["lulo", "agua", "azúcar"]', 5, 300.00, 120, TRUE, FALSE, FALSE, 'jugo-de-lulo', '["bebida", "natural", "fruta"]'),
('POS-001', 'Quesillo Llanero', 'Postre tradicional de los llanos con miel de panela', 5, 6500.00, 2800.00, 5200.00, 15, 5, '["leche", "cuajo", "miel de panela"]', 10, 180.00, 280, TRUE, TRUE, FALSE, 'quesillo-llanero', '["postre", "tradicional", "lácteo"]');

-- Zonas de entrega
INSERT INTO zonas_entrega (nombre, descripcion, costo_envio, tiempo_entrega_min, tiempo_entrega_max, pedido_minimo, barrios, activo) VALUES
('Centro', 'Zona centro de Bogotá', 3000.00, 25, 45, 10000.00, '["La Candelaria", "Centro", "Santa Bárbara"]', TRUE),
('Norte', 'Zona norte de Bogotá', 5000.00, 30, 60, 15000.00, '["Chapinero", "Zona Rosa", "Usaquén"]', TRUE),
('Sur', 'Zona sur de Bogotá', 4000.00, 35, 70, 12000.00, '["San Cristóbal", "Usme", "Bosa"]', TRUE),
('Suba', 'Localidad de Suba', 6000.00, 40, 80, 20000.00, '["Suba Centro", "Tibabuyes", "La Gaitana"]', TRUE);

-- Más usuarios de prueba (clientes y vendedores)
INSERT INTO users (name, apellidos, cedula, email, telefono, direccion, ciudad, departamento, rol, password, email_verified_at, codigo_referido, referido_por) VALUES
('Ana María', 'Jiménez Castro', '55566677', 'ana@cliente.com', '3005556667', 'Calle 50 #25-30', 'Bogotá', 'Cundinamarca', 'cliente', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', NOW(), 'CLIENTE002', 3),
('Luis Fernando', 'Sánchez Villa', '44455566', 'luis@vendedor.com', '3004445556', 'Carrera 30 #80-45', 'Bogotá', 'Cundinamarca', 'vendedor', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', NOW(), 'VEND002', 2),
('Carmen Elena', 'Torres Díaz', '33344455', 'carmen@cliente.com', '3003334445', 'Avenida 15 #60-20', 'Bogotá', 'Cundinamarca', 'cliente', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', NOW(), 'CLIENTE003', 6);

-- Pedidos de ejemplo
INSERT INTO pedidos (numero_pedido, user_id, estado, subtotal, impuestos, costo_envio, total, tipo_entrega, direccion_entrega, telefono_entrega, zona_entrega_id, vendedor_id) VALUES
('ARE-2024-0001', 4, 'entregado', 16000.00, 3040.00, 5000.00, 24040.00, 'domicilio', 'Calle Cliente #56-78', '3009988776', 1, 3),
('ARE-2024-0002', 5, 'confirmado', 21500.00, 4085.00, 3000.00, 28585.00, 'domicilio', 'Calle 50 #25-30', '3005556667', 1, 3),
('ARE-2024-0003', 7, 'en_preparacion', 18000.00, 3420.00, 4000.00, 25420.00, 'domicilio', 'Avenida 15 #60-20', '3003334445', 3, 6);

-- Detalles de pedidos
INSERT INTO detalle_pedidos (pedido_id, producto_id, cantidad, precio_unitario, subtotal, observaciones_producto) VALUES
(1, 3, 1, 12000.00, 12000.00, 'Sin cebolla'),
(1, 1, 1, 3500.00, 3500.00, NULL),
(1, 6, 1, 4500.00, 4500.00, NULL),
(2, 4, 1, 13500.00, 13500.00, 'Extra aguacate'),
(2, 2, 1, 5500.00, 5500.00, NULL),
(2, 7, 1, 5000.00, 5000.00, NULL),
(3, 3, 1, 12000.00, 12000.00, NULL),
(3, 8, 1, 6500.00, 6500.00, NULL);

-- Registrar relaciones de referidos
INSERT INTO referidos (referidor_id, referido_id, estado, fecha_activacion, total_pedidos, total_compras) VALUES
(3, 5, 'activo', NOW(), 1, 28585.00),
(2, 6, 'activo', NOW(), 0, 0.00),
(6, 7, 'activo', NOW(), 1, 25420.00);

-- Generar comisiones de ejemplo
INSERT INTO comisiones (user_id, pedido_id, tipo, monto_base, porcentaje, monto_comision, descripcion, estado) VALUES
(3, 1, 'venta_directa', 24040.00, 15.00, 3606.00, 'Comisión por venta directa - Pedido #1', 'aprobada'),
(3, 2, 'venta_directa', 28585.00, 15.00, 4287.75, 'Comisión por venta directa - Pedido #2', 'pendiente'),
(3, 2, 'referido_compra', 28585.00, 10.00, 2858.50, 'Comisión por compra de referido - Pedido #2', 'pendiente'),
(6, 3, 'venta_directa', 25420.00, 15.00, 3813.00, 'Comisión por venta directa - Pedido #3', 'pendiente');

-- Notificaciones de ejemplo
INSERT INTO notificaciones (user_id, titulo, mensaje, tipo, leida) VALUES
(1, 'Bienvenido al Sistema', 'Bienvenido a Arepa la Llanerita. Tu cuenta de administrador ha sido creada exitosamente.', 'success', FALSE),
(3, 'Nuevo Pedido Asignado', 'Se te ha asignado el pedido ARE-2024-0002 para gestionar.', 'info', FALSE),
(3, 'Comisión Aprobada', 'Tu comisión de $3,606 por el pedido ARE-2024-0001 ha sido aprobada.', 'success', TRUE),
(2, 'Nuevo Referido', 'Ana María se registró usando tu código de referido. ¡Felicitaciones!', 'success', FALSE);

-- Cupones de ejemplo
INSERT INTO cupones (codigo, nombre, descripcion, tipo, valor, monto_minimo, usos_maximos, fecha_inicio, fecha_fin, activo) VALUES
('BIENVENIDO10', 'Descuento Bienvenida', 'Descuento del 10% para nuevos clientes', 'porcentaje', 10.00, 20000.00, 100, '2024-01-01', '2024-12-31', TRUE),
('PRIMERACOMPRA', 'Primera Compra', 'Descuento de $5000 en tu primera compra', 'monto_fijo', 5000.00, 25000.00, NULL, '2024-01-01', '2024-12-31', TRUE),
('REFERIDO2024', 'Referido Especial', 'Descuento especial para clientes referidos', 'porcentaje', 15.00, 30000.00, 50, '2024-01-01', '2024-06-30', TRUE);

-- =====================================================
-- VISTAS PARA REPORTES OPTIMIZADOS
-- =====================================================

-- Vista: Resumen de ventas por vendedor
CREATE VIEW vista_ventas_vendedor AS
SELECT 
    u.id,
    u.name,
    u.apellidos,
    u.cedula,
    u.rol,
    COUNT(p.id) as total_pedidos,
    COALESCE(SUM(p.total), 0) as total_ventas,
    COALESCE(SUM(c.monto_comision), 0) as total_comisiones,
    u.meta_mensual,
    ROUND((COALESCE(SUM(p.total), 0) / NULLIF(u.meta_mensual, 0)) * 100, 2) as porcentaje_meta
FROM users u
LEFT JOIN pedidos p ON u.id = p.vendedor_id AND p.estado IN ('entregado', 'confirmado')
LEFT JOIN comisiones c ON u.id = c.user_id AND c.estado = 'aprobada'
WHERE u.rol IN ('vendedor', 'lider')
GROUP BY u.id;

-- Vista: Productos más vendidos
CREATE VIEW vista_productos_populares AS
SELECT 
    p.id,
    p.codigo,
    p.nombre,
    p.precio,
    p.stock,
    p.veces_vendido,
    c.nombre as categoria,
    COALESCE(SUM(dp.cantidad), 0) as cantidad_vendida_mes,
    COALESCE(SUM(dp.subtotal), 0) as ingresos_mes
FROM productos p
INNER JOIN categorias c ON p.categoria_id = c.id
LEFT JOIN detalle_pedidos dp ON p.id = dp.producto_id
LEFT JOIN pedidos ped ON dp.pedido_id = ped.id 
    AND ped.created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
    AND ped.estado IN ('entregado', 'confirmado')
WHERE p.disponible = TRUE
GROUP BY p.id
ORDER BY cantidad_vendida_mes DESC, p.veces_vendido DESC;

-- Vista: Resumen de referidos por usuario
CREATE VIEW vista_resumen_referidos AS
SELECT 
    u.id,
    u.name,
    u.apellidos,
    u.codigo_referido,
    u.total_referidos,
    u.comisiones_ganadas,
    u.comisiones_disponibles,
    COUNT(r.id) as referidos_activos,
    COALESCE(SUM(r.total_compras), 0) as ventas_referidos,
    COALESCE(SUM(r.comision_generada), 0) as comisiones_referidos
FROM users u
LEFT JOIN referidos r ON u.id = r.referidor_id AND r.estado = 'activo'
WHERE u.rol IN ('vendedor', 'lider', 'cliente')
GROUP BY u.id;

-- Vista: Dashboard de inventario crítico
CREATE VIEW vista_inventario_critico AS
SELECT 
    p.id,
    p.codigo,
    p.nombre,
    p.stock,
    p.stock_minimo,
    c.nombre as categoria,
    CASE 
        WHEN p.stock = 0 THEN 'AGOTADO'
        WHEN p.stock <= p.stock_minimo THEN 'CRÍTICO'
        WHEN p.stock <= (p.stock_minimo * 2) THEN 'BAJO'
        ELSE 'OK'
    END as estado_stock,
    p.precio,
    p.veces_vendido,
    COALESCE(AVG(dp.cantidad), 0) as venta_promedio_diaria
FROM productos p
INNER JOIN categorias c ON p.categoria_id = c.id
LEFT JOIN detalle_pedidos dp ON p.id = dp.producto_id
LEFT JOIN pedidos ped ON dp.pedido_id = ped.id 
    AND ped.created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
    AND ped.estado IN ('entregado', 'confirmado')
WHERE p.disponible = TRUE AND p.stock <= (p.stock_minimo * 2)
GROUP BY p.id
ORDER BY 
    CASE 
        WHEN p.stock = 0 THEN 1
        WHEN p.stock <= p.stock_minimo THEN 2
        ELSE 3
    END,
    p.veces_vendido DESC;

-- =====================================================
-- ÍNDICES ADICIONALES PARA OPTIMIZACIÓN
-- =====================================================

-- Índices compuestos para consultas frecuentes
CREATE INDEX idx_pedidos_vendedor_estado_fecha ON pedidos(vendedor_id, estado, created_at);
CREATE INDEX idx_comisiones_user_estado_fecha ON comisiones(user_id, estado, fecha_calculo);
CREATE INDEX idx_productos_categoria_disponible_destacado ON productos(categoria_id, disponible, destacado);
CREATE INDEX idx_detalle_pedidos_producto_fecha ON detalle_pedidos(producto_id, created_at);
CREATE INDEX idx_referidos_referidor_estado ON referidos(referidor_id, estado);

-- =====================================================
-- CONSULTAS DE VERIFICACIÓN
-- =====================================================

-- Verificar que todo se creó correctamente
SELECT 'Base de datos creada exitosamente' as Resultado;

-- Estadísticas generales
SELECT 'ESTADÍSTICAS GENERALES' as Seccion;
SELECT COUNT(*) as 'Total Usuarios' FROM users;
SELECT COUNT(*) as 'Total Productos' FROM productos;
SELECT COUNT(*) as 'Total Categorías' FROM categorias;
SELECT COUNT(*) as 'Total Configuraciones' FROM configuraciones;
SELECT COUNT(*) as 'Total Pedidos' FROM pedidos;
SELECT COUNT(*) as 'Total Comisiones' FROM comisiones;
SELECT COUNT(*) as 'Total Referidos' FROM referidos;

-- Mostrar estructura de las tablas principales
SELECT 'TABLAS CREADAS' as Seccion;
SHOW TABLES;

-- Verificar usuarios con sus códigos de referido
SELECT 'USUARIOS CON REFERIDOS' as Seccion;
SELECT id, name, apellidos, cedula, rol, codigo_referido, referido_por, total_referidos 
FROM users 
ORDER BY rol, id;

-- Verificar productos por categoría
SELECT 'PRODUCTOS POR CATEGORÍA' as Seccion;
SELECT c.nombre as categoria, COUNT(p.id) as total_productos, 
       SUM(p.stock) as stock_total, AVG(p.precio) as precio_promedio
FROM categorias c
LEFT JOIN productos p ON c.id = p.categoria_id
GROUP BY c.id, c.nombre;

-- Verificar pedidos y comisiones
SELECT 'RESUMEN DE PEDIDOS Y COMISIONES' as Seccion;
SELECT 
    p.numero_pedido,
    u.name as cliente,
    v.name as vendedor,
    p.total,
    p.estado,
    COUNT(c.id) as total_comisiones,
    COALESCE(SUM(c.monto_comision), 0) as monto_comisiones
FROM pedidos p
JOIN users u ON p.user_id = u.id
LEFT JOIN users v ON p.vendedor_id = v.id
LEFT JOIN comisiones c ON p.id = c.pedido_id
GROUP BY p.id
ORDER BY p.id;

-- Verificar estructura de referidos
SELECT 'ESTRUCTURA DE REFERIDOS' as Seccion;
SELECT 
    r.name as referidor,
    rf.name as referido,
    ref.estado,
    ref.total_compras,
    ref.comision_generada
FROM referidos ref
JOIN users r ON ref.referidor_id = r.id
JOIN users rf ON ref.referido_id = rf.id;

-- Verificar configuraciones del sistema
SELECT 'CONFIGURACIONES DEL SISTEMA' as Seccion;
SELECT categoria, COUNT(*) as total_configs 
FROM configuraciones 
GROUP BY categoria 
ORDER BY categoria;

-- =====================================================
-- FINALIZACIÓN
-- =====================================================

COMMIT;

-- Mensaje final
SELECT 
    'INSTALACIÓN COMPLETADA' as Estado,
    'Base de datos lista para Laravel' as Mensaje,
    'Usuarios de prueba creados' as Datos,
    'Sistema de referidos funcionando' as Funcionalidad;