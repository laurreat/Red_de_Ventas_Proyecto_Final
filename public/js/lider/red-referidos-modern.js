class RedReferidosManager{constructor(){if(RedReferidosManager.instance){return RedReferidosManager.instance}RedReferidosManager.instance=this;this.init()}init(){this.initEventListeners();this.initNetworkExpanders();this.initProgressBars();this.initStatsAnimations();this.initTooltips();console.log('✅ Red de Referidos Manager inicializado')}initEventListeners(){document.addEventListener('keydown',(e)=>{if(e.key==='Escape'){this.closeAllModals()}});document.querySelectorAll('[data-bs-toggle="modal"]').forEach(btn=>{btn.addEventListener('click',(e)=>{const target=btn.getAttribute('data-bs-target');if(target){this.logModalOpen(target)}})});window.addEventListener('load',()=>{this.animateCounters()})}initNetworkExpanders(){document.querySelectorAll('.expand-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{e.preventDefault();e.stopPropagation();const parentNode=btn.closest('.network-node, .referido-node');const subNetwork=parentNode?.querySelector('.sub-network');if(subNetwork){const isExpanded=subNetwork.classList.contains('active');if(isExpanded){this.collapseNetwork(subNetwork,btn)}else{this.expandNetwork(subNetwork,btn)}}})})}expandNetwork(element,btn){element.classList.add('active');btn.innerHTML='<i class="bi bi-dash"></i>';btn.style.transform='translateY(-50%) rotate(180deg)';this.animateChildren(element)}collapseNetwork(element,btn){element.classList.remove('active');btn.innerHTML='<i class="bi bi-plus"></i>';btn.style.transform='translateY(-50%) rotate(0deg)'}animateChildren(container){const children=container.querySelectorAll('.sub-referido-node');children.forEach((child,index)=>{child.style.animationDelay=`${index*0.1}s`})}initProgressBars(){const progressBars=document.querySelectorAll('.progress-bar-fill, .capacitacion-progress-fill');const observer=new IntersectionObserver((entries)=>{entries.forEach(entry=>{if(entry.isIntersecting){const bar=entry.target;const width=bar.getAttribute('data-width')||bar.style.width;setTimeout(()=>{bar.style.width=width},100);observer.unobserve(bar)}})},{threshold:0.1});progressBars.forEach(bar=>{const currentWidth=bar.style.width;bar.setAttribute('data-width',currentWidth);bar.style.width='0%';observer.observe(bar)})}initStatsAnimations(){const statCards=document.querySelectorAll('.red-referidos-stat-card');const observer=new IntersectionObserver((entries)=>{entries.forEach((entry,index)=>{if(entry.isIntersecting){setTimeout(()=>{entry.target.style.opacity='1';entry.target.style.transform='translateY(0)'},index*100);observer.unobserve(entry.target)}})},{threshold:0.1});statCards.forEach(card=>{card.style.opacity='0';card.style.transform='translateY(20px)';observer.observe(card)})}animateCounters(){document.querySelectorAll('.red-referidos-stat-value').forEach(counter=>{const target=parseInt(counter.textContent)||0;const duration=1500;const increment=target/duration*10;let current=0;const timer=setInterval(()=>{current+=increment;if(current>=target){counter.textContent=target;clearInterval(timer)}else{counter.textContent=Math.floor(current)}},10)})}initTooltips(){if(typeof bootstrap!=='undefined'&&bootstrap.Tooltip){const tooltipTriggerList=[...document.querySelectorAll('[data-bs-toggle="tooltip"]')];tooltipTriggerList.map(el=>new bootstrap.Tooltip(el))}}showModal(title,content,options={}){const modalId='dynamicModal_'+Date.now();const modalHTML=`
<div class="modal fade" id="${modalId}" tabindex="-1">
    <div class="modal-dialog ${options.size||'modal-lg'}">
        <div class="modal-content">
            <div class="modal-header" style="background: linear-gradient(135deg, var(--wine), var(--wine-dark)); color: white;">
                <h5 class="modal-title">${title}</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">${content}</div>
            ${options.footer?`<div class="modal-footer">${options.footer}</div>`:''}
        </div>
    </div>
</div>`;document.body.insertAdjacentHTML('beforeend',modalHTML);const modalElement=document.getElementById(modalId);const modal=new bootstrap.Modal(modalElement);modal.show();modalElement.addEventListener('hidden.bs.modal',()=>{modalElement.remove()});return modal}showToast(message,type='info',duration=3000){const toastId='toast_'+Date.now();const icons={success:'bi-check-circle-fill',error:'bi-x-circle-fill',warning:'bi-exclamation-triangle-fill',info:'bi-info-circle-fill'};const toastHTML=`
<div class="red-referidos-toast ${type}" id="${toastId}">
    <div class="red-referidos-toast-icon">
        <i class="bi ${icons[type]||icons.info}"></i>
    </div>
    <p class="red-referidos-toast-message">${message}</p>
</div>`;document.body.insertAdjacentHTML('beforeend',toastHTML);const toast=document.getElementById(toastId);setTimeout(()=>toast.classList.add('show'),10);setTimeout(()=>{toast.classList.remove('show');setTimeout(()=>toast.remove(),300)},duration)}showLoading(){if(document.querySelector('.red-referidos-loading')){return}const loadingHTML=`
<div class="red-referidos-loading active">
    <div class="red-referidos-spinner"></div>
</div>`;document.body.insertAdjacentHTML('beforeend',loadingHTML)}hideLoading(){const loading=document.querySelector('.red-referidos-loading');if(loading){loading.classList.remove('active');setTimeout(()=>loading.remove(),300)}}confirmarEliminar(id,nombre){if(confirm(`¿Estás seguro de eliminar al referido "${nombre}"?\n\nEsta acción no se puede deshacer.`)){this.eliminarReferido(id)}}eliminarReferido(id){this.showLoading();fetch(`/lider/referidos/${id}`,{method:'DELETE',headers:{'X-CSRF-TOKEN':document.querySelector('meta[name="csrf-token"]')?.content||'','Content-Type':'application/json'}}).then(response=>response.json()).then(data=>{this.hideLoading();if(data.success){this.showToast('Referido eliminado correctamente','success');setTimeout(()=>window.location.reload(),1500)}else{this.showToast(data.message||'Error al eliminar el referido','error')}}).catch(error=>{this.hideLoading();console.error('Error:',error);this.showToast('Error al eliminar el referido','error')})}asignarCapacitacion(referidoId,referidoNombre){const content=`
<form id="asignarCapacitacionForm" class="needs-validation" novalidate>
    <input type="hidden" name="referido_id" value="${referidoId}">
    <div class="mb-3">
        <label class="form-label fw-bold">Referido:</label>
        <input type="text" class="form-control" value="${referidoNombre}" disabled>
    </div>
    <div class="mb-3">
        <label class="form-label fw-bold">Capacitación:</label>
        <select name="capacitacion_id" class="form-select" required>
            <option value="">Seleccione una capacitación...</option>
        </select>
    </div>
</form>`;const footer=`
<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
<button type="button" class="capacitacion-action-btn-view" onclick="redReferidosManager.submitAsignarCapacitacion()">
    <i class="bi bi-check-circle"></i> Asignar
</button>`;this.showModal('Asignar Capacitación',content,{footer});this.cargarCapacitaciones()}cargarCapacitaciones(){fetch('/lider/capacitacion/lista').then(response=>response.json()).then(data=>{const select=document.querySelector('#asignarCapacitacionForm select[name="capacitacion_id"]');data.forEach(cap=>{const option=document.createElement('option');option.value=cap.id;option.textContent=`${cap.titulo} (${cap.nivel})`;select.appendChild(option)})}).catch(error=>{console.error('Error al cargar capacitaciones:',error);this.showToast('Error al cargar capacitaciones','error')})}submitAsignarCapacitacion(){const form=document.getElementById('asignarCapacitacionForm');if(!form.checkValidity()){form.classList.add('was-validated');return}const formData=new FormData(form);this.showLoading();fetch('/lider/capacitacion/asignar',{method:'POST',headers:{'X-CSRF-TOKEN':document.querySelector('meta[name="csrf-token"]')?.content||''},body:formData}).then(response=>response.json()).then(data=>{this.hideLoading();if(data.success){this.showToast('Capacitación asignada correctamente','success');setTimeout(()=>window.location.reload(),1500)}else{this.showToast(data.message||'Error al asignar capacitación','error')}}).catch(error=>{this.hideLoading();console.error('Error:',error);this.showToast('Error al asignar capacitación','error')})}verDetalleReferido(id){this.showLoading();fetch(`/lider/referidos/${id}/detalle`).then(response=>response.json()).then(data=>{this.hideLoading();if(data.success){const content=this.buildDetalleContent(data.referido);this.showModal(`Detalle: ${data.referido.nombre}`,content,{size:'modal-xl'})}else{this.showToast('Error al cargar detalles','error')}}).catch(error=>{this.hideLoading();console.error('Error:',error);this.showToast('Error al cargar detalles','error')})}buildDetalleContent(referido){return`
<div class="row">
    <div class="col-md-6">
        <h6 class="fw-bold mb-3" style="color: var(--wine);">Información Personal</h6>
        <p><strong>Nombre:</strong> ${referido.nombre}</p>
        <p><strong>Email:</strong> ${referido.email||'N/A'}</p>
        <p><strong>Teléfono:</strong> ${referido.telefono||'N/A'}</p>
        <p><strong>Estado:</strong> <span class="red-referidos-badge red-referidos-badge-${referido.activo?'success':'danger'}">${referido.activo?'Activo':'Inactivo'}</span></p>
    </div>
    <div class="col-md-6">
        <h6 class="fw-bold mb-3" style="color: var(--wine);">Estadísticas</h6>
        <p><strong>Nivel:</strong> ${referido.nivel||1}</p>
        <p><strong>Referidos:</strong> ${referido.total_referidos||0}</p>
        <p><strong>Ventas:</strong> $${referido.total_ventas||0}</p>
        <p><strong>Fecha Registro:</strong> ${referido.fecha_registro||'N/A'}</p>
    </div>
</div>`}exportarRed(formato='pdf'){this.showLoading();fetch(`/lider/referidos/exportar?formato=${formato}`,{method:'GET',headers:{'X-CSRF-TOKEN':document.querySelector('meta[name="csrf-token"]')?.content||''}}).then(response=>{if(response.ok){return response.blob()}throw new Error('Error en la exportación')}).then(blob=>{const url=window.URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`red-referidos-${Date.now()}.${formato}`;document.body.appendChild(a);a.click();window.URL.revokeObjectURL(url);a.remove();this.hideLoading();this.showToast(`Red exportada en formato ${formato.toUpperCase()}`,'success')}).catch(error=>{this.hideLoading();console.error('Error:',error);this.showToast('Error al exportar la red','error')})}filtrarPorNivel(nivel){const nodes=document.querySelectorAll('.network-node, .referido-node');nodes.forEach(node=>{const nodeNivel=parseInt(node.getAttribute('data-nivel')||'0');if(nivel==='todos'||nodeNivel===parseInt(nivel)){node.style.display='block'}else{node.style.display='none'}})}buscarReferido(query){const nodes=document.querySelectorAll('.network-node, .referido-node');const searchTerm=query.toLowerCase();nodes.forEach(node=>{const nombre=node.querySelector('.node-name')?.textContent.toLowerCase()||'';const email=node.querySelector('.node-email')?.textContent.toLowerCase()||'';if(nombre.includes(searchTerm)||email.includes(searchTerm)){node.style.display='block';node.style.background='rgba(114, 47, 55, 0.1)'}else{node.style.display='none'}})}resetFiltros(){document.querySelectorAll('.network-node, .referido-node').forEach(node=>{node.style.display='block';node.style.background=''});const searchInput=document.querySelector('input[type="search"]');if(searchInput){searchInput.value=''}}closeAllModals(){document.querySelectorAll('.modal.show').forEach(modal=>{const bsModal=bootstrap.Modal.getInstance(modal);if(bsModal){bsModal.hide()}})}logModalOpen(target){console.log(`📊 Modal abierto: ${target}`)}updateNetworkStats(){fetch('/lider/referidos/stats').then(response=>response.json()).then(data=>{if(data.success){Object.keys(data.stats).forEach(key=>{const element=document.querySelector(`[data-stat="${key}"]`);if(element){element.textContent=data.stats[key]}})}}).catch(error=>console.error('Error al actualizar estadísticas:',error))}}let redReferidosManager;document.addEventListener('DOMContentLoaded',()=>{redReferidosManager=new RedReferidosManager();console.log('🚀 Red de Referidos Module Ready')});